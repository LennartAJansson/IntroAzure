# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '90f79f05-5e0b-4001-995e-b5b9174d2678'
  imageRepository: 'weatherforecast'
  containerRegistry: 'lennartacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/WeatherForecast/'
  tag: '$(Build.BuildId)'
  
  # Agent VM image name
  #vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      name: DL-Test
      #vmImage: $(vmImageName)
    steps:

    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Visual Studio Enterprise(4de1d502-8eea-407d-8c07-fd29a1f74686)'
        azureContainerRegistry: '{"loginServer":"lennartacr.azurecr.io", "id" : "/subscriptions/4de1d502-8eea-407d-8c07-fd29a1f74686/resourceGroups/LennartAKS/providers/Microsoft.ContainerRegistry/registries/LennartACR"}'
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Build services'
        additionalImageTags: '$(Build.BuildId)'
        includeLatestTag: true

    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Visual Studio Enterprise(4de1d502-8eea-407d-8c07-fd29a1f74686)'
        azureContainerRegistry: '{"loginServer":"lennartacr.azurecr.io", "id" : "/subscriptions/4de1d502-8eea-407d-8c07-fd29a1f74686/resourceGroups/LennartAKS/providers/Microsoft.ContainerRegistry/registries/LennartACR"}'
        dockerComposeFile: '**/docker-compose.yml'
        additionalDockerComposeFiles: '**/docker-compose.override.yml'
        action: 'Run a specific service'
        serviceName: 'weatherforecast-tests'
        detached: false

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/*.trx'
        searchFolder: '$(System.ArtifactStagingingDirectory)'
        failTaskOnFailedTests: true
        testRunTitle: 'IntroAzure - UnitTests Build: $(Build.BuildId)'

    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Visual Studio Enterprise(4de1d502-8eea-407d-8c07-fd29a1f74686)'
        azureContainerRegistry: '{"loginServer":"lennartacr.azurecr.io", "id" : "/subscriptions/4de1d502-8eea-407d-8c07-fd29a1f74686/resourceGroups/LennartAKS/providers/Microsoft.ContainerRegistry/registries/LennartACR"}'
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Push services'
        additionalImageTags: '$(Build.BuildId)'
        includeLatestTag: true

#    - task: DotNetCoreCLI@2
#      inputs:
#        command: 'test'
#        projects: '**/*.UnitTests.csproj'
#        arguments: '/p:CollectCoverage=true'
#        testRunTitle: 'UnitTests - IntroAzure Build:$(Build.BuildId)'
#    - task: Docker@2
#      displayName: Build and push an image to container registry
#      inputs:
#        containerRegistry: '$(dockerRegistryServiceConnection)'
#        repository: '$(imageRepository)'
#        command: 'buildAndPush'
#        Dockerfile: '$(dockerfilePath)Dockerfile'
#        buildContext: '$(dockerfilePath)/..'
#        tags: '$(tag)'

    - task: replacetokens@3
      inputs:
        rootDirectory: '$(Build.SourcesDirectory)'
        targetFiles: 'WeatherForecast.yaml'
        encoding: 'auto'
        writeBOM: false
        actionOnMissing: 'warn'
        keepToken: false
        tokenPrefix: '#{'
        tokenSuffix: '}#'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: 'WeatherForecast.yaml'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'drop'
        publishLocation: 'pipeline'